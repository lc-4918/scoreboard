name: Scoreboard CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  deployments: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Setup for Java and Node.js
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      # Build Frontend
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Run frontend tests
        run: |
          cd frontend
          npm run test -- --no-watch --no-progress --browsers=ChromeHeadless
          
      - name: Build Angular app
        run: |
          cd frontend
          # Afficher la version d'Angular CLI
          npx ng version
          # Build avec chemin de sortie explicite et configuration de production
          npm run build -- --configuration=production --output-path=dist/browser
          
      # Copier le build Angular dans les ressources statiques du backend
      - name: Copy Angular build to backend static resources
        run: |
          mkdir -p backend/src/main/resources/static
          # Vérifier la structure des dossiers de build
          ls -la frontend/dist/
          # Si le build est dans frontend/dist/frontend/browser (Angular 17)
          if [ -d "frontend/dist/browser" ]; then
            cp -r frontend/dist/browser/* backend/src/main/resources/static/
          # Si le build est dans frontend/dist/frontend
          elif [ -d "frontend/dist/frontend" ]; then
            cp -r frontend/dist/frontend/* backend/src/main/resources/static/
          # Sinon, essayer le chemin standard
          else
            cp -r frontend/dist/* backend/src/main/resources/static/ || echo "Couldn't find Angular build files"
          fi
          # Vérifier le contenu du dossier static
          echo "Contenu du dossier static après copie:"
          ls -la backend/src/main/resources/static/ || echo "Le dossier static est vide ou n'existe pas"
      
      # Build Backend
      - name: Grant execute permission for gradlew
        run: chmod +x ./backend/gradlew
        
      - name: Build backend with Gradle
        run: |
          cd backend
          ./gradlew build
          
      - name: Run backend tests
        run: |
          cd backend
          ./gradlew test
          
      # Créer les fichiers pour le déploiement sur Render
      - name: Prepare for Render deployment
        run: |
          # Créer le répertoire pour le déploiement
          mkdir -p deploy
          
          # Copier le fichier JAR
          cp backend/build/libs/*.jar deploy/app.jar
          
          # Créer le Dockerfile
          cat > deploy/Dockerfile << 'EOF'
          FROM openjdk:17-jdk-slim
          
          WORKDIR /app
          
          COPY app.jar app.jar
          
          # Variables d'environnement Render
          ENV PORT=8080
          
          # Exposer le port
          EXPOSE 8080
          
          # Commande pour démarrer l'application
          CMD ["java", "-Dserver.port=${PORT}", "-jar", "app.jar"]
          EOF
          
          # Créer un fichier render.yaml pour la configuration
          cat > render.yaml << 'EOF'
          services:
            - type: web
              name: scoreboard
              env: docker
              dockerfilePath: ./deploy/Dockerfile
              plan: free
              healthCheckPath: /
              envVars:
                - key: MONGO_URI
                  sync: false
          EOF
          
      # Upload les artifacts pour déploiement manuel
      - name: Archive deployment package
        uses: actions/upload-artifact@v3
        with:
          name: deploy-package
          path: |
            deploy/
            render.yaml 